enum StatusType {
	NONE,
    ON_GOING,
    FAILED,
    DONE
}

/**
 * This class an event uses
 * @author Eric Lamore
 */
entity EventUses {
	cusotmerId String,
    customerName String,
    subscriptionId String,
    subscriptionName String,
    productId String,
    productName String,
    month Integer,
    year Integer,
    status StatusType,
    error String,
    total Long
}

/**
 * This class a product
 * @author Eric Lamore
 */
entity Product {
	productName String,
    productId String,
    calculator String
}

/**
 * This class reprensents a link between a billing customer
 * and one of the customer's organization
 * @author Eric Lamore
 */
entity CustomerOrganizationLink
{
	/** the organisation identifier */
    organisationId String, 
    /** the organisation name */
	organisationName String, 
    /** the organisation register date */
	organisationRegisterDate LocalDate, 
     /** the customer identifier */
	customerId String,
    /** the customer name */
    customerName String 
}

/**
 * This class reprensents a link between a billing 
 * product rate plan and a stripe price
 * @author Eric Lamore
 */
entity ProductRatePlanPriceLink
{
	/** the stripe price identifier */
    stripeId String, 
    /** the stripe price nick name */
	stripeNickName String, 
    /** the billing product rate plan identifier */
	productRatePlanId String, 
     /** the billing product rate plan name */
	productRatePlanName String,    
    /** migration date to stripe */
    migrateAt LocalDate,
    /** migration update Date*/
    updatedAt LocalDate 
}

/**
 * This class represents a light
 * billing customer
 * @author Eric Lamore
 */
entity BillingCustomer {
	/** the tax number of customer */
    taxNo String, 
    /** the third party accounting code of the customer */
	thirdPartyAccountingCode String, 
	/** the siret of the customer */
    siret String, 
	/** the owner identifier of the customer */
    ownerId String, 
    /** true if the customer is a particular, false otherwise */
	isParticular Boolean, 
    /** true if the customer is a partner, false otherwise */
	partner Boolean, 
    /** the partner identifier */
	partnerId String, 
    /** the billing customer identifier */
	customerId String, 
    /** the billing name of the customer */
	customerName String, 
    /** the stripe customer identifier */
    stripeId String,
    /** the stripe email of the customer */
    stripeEmail String,
    /** migration date to stripe */
    migrateAt LocalDate,
    /** migration update Date*/
    updatedAt LocalDate 
}

/**
 * This class represents a customer link beetween
 * billing and stripe
 * @author Eric Lamore
 */
entity BillingStripeLink {
	/** the stripe customer identifier */
    stripeId String,
    /** the stripe email of the customer */
    stripeEmail String,
	/** the billing customer identifier */
	customerId String, 
    /** the billing name of the customer */
	customerName String, 
    /** migration date to stripe */
    migrateAt LocalDate,
    /** migration update Date*/
    updatedAt LocalDate 
}




// Set pagination options
paginate BillingStripeLink with pagination

// Use Data Transfert Objects (DTO)
// dto * with mapstruct

// Set service options to all except few
service all with serviceImpl except BillingCustomer
// Set an angular suffix
// angularSuffix * with mySuffix
